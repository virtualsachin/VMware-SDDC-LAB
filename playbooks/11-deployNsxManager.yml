##
##    Project: VMware NSXT SDDC Design POC Lab
##    Authors: VirtualSachIN
##    Filename: playbooks/deployNsxManager.yml
##
---
- hosts: localhost
  gather_facts: False
  vars_files:
    - ../answerfile.yml    
  name: deployNsxManager.yml
  tasks:
    - name: deployNsxManager_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{Pod.Name}} ==================================


                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                       Target.Cluster: {{ Target.Cluster }}
                                    Target.DataCenter: {{ Target.DataCenter }}
                                  Target.DatastoreSSD: {{ Target.DatastoreSSD }}
                                      Target.VMFolder: {{ Target.VMFolder }}

                                           NSX-T Role: {{ Nested_NSXT.Components.LocalManager.Deployment.Role }}
                                        NSX-T Version: {{ Deploy.Software.NSXT.Version }}
                                   NSX-T Manager FQDN: {{ Nested_NSXT.Components.LocalManager.FQDN }}
                                         NSX-T VMName: {{ Nested_NSXT.Components.LocalManager.VMName }}


                                                OVF Variables
                                                =============

                                         NSX-T VMName: {{ Nested_NSXT.Components.LocalManager.VMName }}
                                           NSX-T Size: {{ Nested_NSXT.Components.LocalManager.Deployment.Size  }}
                                    Network PortGroup: {{ Target.PortGroup.Management.Name }}

                                           Audit User: {{ Nested_NSXT.Credential.audit.Name }}
                                       Audit Password: {{ Nested_NSXT.Credential.audit.Password }}

                                             CLI User: {{ Nested_NSXT.Credential.admin.Name }}
                                         CLI Password: {{ Nested_NSXT.Credential.admin.Password }}

                                 Network IPv4 Address: {{ Nested_NSXT.Components.LocalManager.Address.IPv4.Address }}
                                      Network Netmask: {{ (Nested_NSXT.Components.LocalManager.Address.IPv4.Address + '/' + Nested_NSXT.Components.LocalManager.Address.IPv4.Prefix) | ipaddr('netmask') }}
                                      Network Gateway: {{ Nested_NSXT.Components.LocalManager.Address.IPv4.Gateway }}

                                   Network NTP Server: {{ Common.NTP.Server1.IPv4 }}
                                   Network DNS Server: {{ Common.DNS.Server1.IPv4 }}
                                   Network DNS Domain: {{ Common.DNS.Domain }}

                                     NSX-T Media Path: {{ Deploy.Software.NSXT.Directory }}
                                     NSX-T Media File: {{ Deploy.Software.NSXT.File }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Check if NSX-T Local Manager is already installed
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Components.LocalManager.FQDN }}
        validate_certs: False
        timeout: 5
      register: nsxman_check
      ignore_errors: true
      failed_when: false
      no_log: true
      when: Deploy.Product.NSXT.LocalManager == true

    - name: Deploy NSX-T Local Manager from OVA when deployment options is vCenter
      community.vmware.vmware_deploy_ovf:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datastore: "{{ Target.DatastoreSSD }}"
        allow_duplicates: no
        folder: "{% if Target.Deployment == 'vCenter' %}/{{ Target.DataCenter }}/vm/{{ Target.VMFolder }}{% else %}{{ Target.VMFolder }}{% endif %}"         # For vCenter deployment, VM Folder path must be the FULL path: /<DataCenter>/vm/<ParentFolder>/<ChildFolder>
        datacenter: "{{ Target.DataCenter }}"
        cluster: "{{ Target.Physical_Cluster }}"
        name: "{{ Nested_NSXT.Components.LocalManager.VMName }}"
        ovf:  "{{ Deploy.Software.NSXT.Directory }}/{{ Deploy.Software.NSXT.File }}"
        deployment_option: "{{ Nested_NSXT.Components.LocalManager.Deployment.Size }}"
        networks:
          "Network 1": "{{ Target.PortGroup.Management.Name }}"
        disk_provisioning: "{{ Common.DiskProvisioning }}"
        power_on: yes
        fail_on_spec_warnings: yes
        wait: yes
        wait_for_ip_address: yes
        inject_ovf_env: yes
        properties:
          nsx_cli_audit_username: "{{ Nested_NSXT.Credential.audit.Name }}"
          nsx_cli_audit_passwd_0: "{{ Nested_NSXT.Credential.audit.Password }}"
          nsx_cli_username: "{{ Nested_NSXT.Credential.admin.Name }}"
          nsx_cli_passwd_0: "{{ Nested_NSXT.Credential.admin.Password }}"
          nsx_allowSSHRootLogin: "{{ Nested_NSXT.Components.LocalManager.Deployment.EnableSSH }}"
          nsx_isSSHEnabled: "{{ Nested_NSXT.Components.LocalManager.Deployment.EnableSSH }}"
          nsx_dns1_0: "{{ Common.DNS.Server1.IPv4 }}"
          nsx_domain_0: "{{ Common.DNS.Domain }}"
          nsx_gateway_0: "{{ Nested_NSXT.Components.LocalManager.Address.IPv4.Gateway }}"
          nsx_hostname:  "{{ Nested_NSXT.Components.LocalManager.FQDN }}"
          nsx_ip_0:      "{{ Nested_NSXT.Components.LocalManager.Address.IPv4.Address }}"
          nsx_netmask_0: "{{ (Nested_NSXT.Components.LocalManager.Address.IPv4.Address + '/' + Nested_NSXT.Components.LocalManager.Address.IPv4.Prefix) | ipaddr('netmask') }}"
          nsx_ntp_0:     "{{ Common.NTP.Server1.IPv4 }}"
          nsx_passwd_0:  "{{ Nested_NSXT.Credential.admin.Password }}"
          nsx_role:      "{{ Nested_NSXT.Components.LocalManager.Deployment.Role }}"
      delegate_to: localhost
      when:
        - Deploy.Product.NSXT.LocalManager == true
        - Target.Deployment == "vCenter"
        - nsxman_check.status != 200
      async: 7200
      poll: 0
      register: deployment

    - name: Deploy NSX-T Local Manager from OVA when deployment options is Host
      community.vmware.vmware_deploy_ovf:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: no
        datastore: "{{ Target.DatastoreSSD }}"
        allow_duplicates: no
        folder: "{% if Target.Deployment == 'vCenter' %}/{{ Target.DataCenter }}/vm/{{ Target.VMFolder }}{% else %}{{ Target.VMFolder }}{% endif %}"         # For vCenter deployment, VM Folder path must be the FULL path: /<DataCenter>/vm/<ParentFolder>/<ChildFolder>
        datacenter: "{{ Target.DataCenter }}"
        cluster: "{{ Target.Physical_Cluster }}"
        name: "{{ Nested_NSXT.Components.LocalManager.VMName }}"
        ovf:  "{{ Deploy.Software.NSXT.Directory }}/{{ Deploy.Software.NSXT.File }}"
        deployment_option: "{{ Nested_NSXT.Components.LocalManager.Deployment.Size }}"
        networks:
          "Network 1": "{{ Target.PortGroup.Management.Name }}"
        disk_provisioning: "{{ Common.DiskProvisioning }}"
        power_on: yes
        fail_on_spec_warnings: yes
        wait: yes
        wait_for_ip_address: yes
        inject_ovf_env: yes
        properties:
          nsx_cli_audit_username: "{{ Nested_NSXT.Credential.audit.Name }}"
          nsx_cli_audit_passwd_0: "{{ Nested_NSXT.Credential.audit.Password }}"
          nsx_cli_username: "{{ Nested_NSXT.Credential.admin.Name }}"
          nsx_cli_passwd_0: "{{ Nested_NSXT.Credential.admin.Password }}"
          nsx_allowSSHRootLogin: "{{ Nested_NSXT.Components.LocalManager.Deployment.EnableSSH }}"
          nsx_isSSHEnabled: "{{ Nested_NSXT.Components.LocalManager.Deployment.EnableSSH }}"
          nsx_dns1_0: "{{ Common.DNS.Server1.IPv4 }}"
          nsx_domain_0: "{{ Common.DNS.Domain }}"
          nsx_gateway_0: "{{ Nested_NSXT.Components.LocalManager.Address.IPv4.Gateway }}"
          nsx_hostname:  "{{ Nested_NSXT.Components.LocalManager.FQDN }}"
          nsx_ip_0:      "{{ Nested_NSXT.Components.LocalManager.Address.IPv4.Address }}"
          nsx_netmask_0: "{{ (Nested_NSXT.Components.LocalManager.Address.IPv4.Address + '/' + Nested_NSXT.Components.LocalManager.Address.IPv4.Prefix) | ipaddr('netmask') }}"
          nsx_ntp_0:     "{{ Common.NTP.Server1.IPv4 }}"
          nsx_passwd_0:  "{{ Nested_NSXT.Credential.admin.Password }}"
          nsx_role:      "{{ Nested_NSXT.Components.LocalManager.Deployment.Role }}"
      delegate_to: localhost
      when:
        - Deploy.Product.NSXT.LocalManager == true
        - Target.Deployment == "Host"
        - nsxman_check.status != 200
      async: 7200
      poll: 0
      register: deployment

    - name: Wait 600 seconds before start checking whether the NSX-T Manager node is ready
      ansible.builtin.pause: seconds=600
      when: 
        - Deploy.Product.NSXT.LocalManager == true
        - deployment.changed == true
        - nsxman_check.status != 200

    - name: Result check for NSX-T Manager node deployment
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      with_items: "{{ deployment.results }}"
      when:
        - Deploy.Product.NSXT.LocalManager == true
        - deployment.changed == true
        - item.started is defined

    - name: Wait until the NSX-T API reports that the NSX-T Manager cluster is "STABLE"
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Components.LocalManager.FQDN | lower }}/api/v1/cluster/status
        validate_certs: no
        timeout: 5
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: result
      until: result.status == 200 and result.json.detailed_cluster_status.overall_status == "STABLE"
      retries: 5
      delay: 60
      when: 
        - Deploy.Product.NSXT.LocalManager == true

    - name: Write annotation on the NSX-T Local Manager VM when Target Deployment is vCenter
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        name: "{{ Nested_NSXT.Components.LocalManager.VMName }}"
        annotation: | 
                    {{ Common.Annotation }}
                    {{ Deploy.Software.NSXT.Vendor }} {{ Deploy.Software.NSXT.Product}} {{ Deploy.Software.NSXT.Version }}
                    Username: {{ Nested_NSXT.Credential.admin.Name }}
                    Password: {{ Nested_NSXT.Credential.admin.Password }}
      when: 
        - Deploy.Product.NSXT.LocalManager == true
        - Target.Deployment == "vCenter"
    - name: Write annotation on the NSX-T Local Manager VM when Target Deployment is Host
      community.vmware.vmware_guest:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: no
        cluster: "{{ Target.Physical_Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        name: "{{ Nested_NSXT.Components.LocalManager.VMName }}"
        annotation: | 
                    {{ Common.Annotation }}
                    {{ Deploy.Software.NSXT.Vendor }} {{ Deploy.Software.NSXT.Product}} {{ Deploy.Software.NSXT.Version }}
                    Username: {{ Nested_NSXT.Credential.admin.Name }}
                    Password: {{ Nested_NSXT.Credential.admin.Password }}
      when: 
        - Deploy.Product.NSXT.LocalManager == true
        - Target.Deployment == "Host"

##
## Disable Password Expiration for all users except for root (API does not permit disabling for 'root' user)
##
    - name: Obtain NSX-T Local Manager User List
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Components.LocalManager.FQDN | lower }}/api/v1/node/users
        validate_certs: no
        timeout: 15
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: UserList
      when: 
        - Deploy.Product.NSXT.LocalManager == true

    - name: Disable Password Expiration Of All NSX-T Users (except for 'root')
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Components.LocalManager.FQDN | lower }}/api/v1/node/users/{{ item.userid }}
        validate_certs: no
        timeout: 15
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: PUT
        body_format: json
        body: '{ "password_change_frequency": 0 }'
        return_content: yes
        status_code: 200
      loop: "{{ UserList.json.results }}"
      when: 
        - Deploy.Product.NSXT.LocalManager == true
        - item.userid > 0
