##
##    Project: VMware NSXT SDDC Design POC Lab
##    Authors: VirtualSachIN
##    Filename: playbooks/configureVsan.yml
##
---
- hosts: localhost
  gather_facts: False
  vars_files:
    - ../answerfile.yml    
  name: configureVsan.yml
  tasks:
    - name: configureVsan_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"


    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ============================ Display Variables For Pod {{Pod.Name}} ===========================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                       Target.Cluster: {{ Target.Cluster }}
                                    Target.DataCenter: {{ Target.DataCenter }}
                                     Target.Datastore: {{ Target.Datastore }}
                                      Target.VMFolder: {{ Target.VMFolder }}
                                    Target.TempFolder: {{ Target.TempFolder }}

                                  vCenter.FQDN: {{ vCenter.FQDN | lower }}
                                vCenter.VMName: {{ vCenter.VMName }}
                              vCenter.Password: {{ vCenter.Password }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Create temp directory
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}"
        state: directory

    - name: Create Ruby script for silencing vSAN warnings
      ansible.builtin.template: 
        src: "../templates/vsan_silence.rb.j2"
        dest: "{{ Target.TempFolder }}/{{ item.key }}"
        mode: "666"
      loop: "{{ Nested_Clusters | dict2items }}"
      when: 
        - item.value.vSAN == true
        - item.value.DeployHosts == true
    - name: Copy Ruby script to the nested vCenter when the deployment is on Host
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        #cluster: "{{ Target.Cluster }}"
        #datacenter: "{{ Target.DataCenter }}"
        #folder: "{{ Target.VMFolder }}"
        validate_certs: false
        vm_id: "{{ vCenter.VMName }}"
        vm_username: "root"
        vm_password: "{{ vCenter.Password }}"
        copy:
            src: "{{ Target.TempFolder }}/{{ item.key }}"
            dest: "/tmp/{{ item.key }}"
            overwrite: true
      loop: "{{ Nested_Clusters | dict2items }}"
      when:
        - item.value.vSAN == true
        - item.value.DeployHosts == true
        - Target.Deployment == "Host"

    - name: Run Ruby script on the nested vCenter
      community.vmware.vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        #cluster: "{{ Target.Cluster }}"
        #datacenter: "{{ Target.DataCenter }}"
        #folder: "{{ Target.VMFolder }}"
        validate_certs: false
        vm_id: "{{ vCenter.VMName }}"
        vm_username: "root"
        vm_password: "{{ vCenter.Password }}"
        vm_shell: /usr/bin/rvc
        vm_shell_args: '{{ vCenter.User }}:VMware1\!@{{ vCenter.FQDN | lower }} -s /tmp/{{ item.key }}'
      loop: "{{ Nested_Clusters | dict2items }}"
      when:
        - item.value.vSAN == true
        - item.value.DeployHosts == true
        - Target.Deployment == "Host"

    - name: Copy Ruby script to the nested vCenter when Target Deployment is vCenter
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        validate_certs: false
        vm_id: "{{ vCenter.VMName }}"
        vm_username: "root"
        vm_password: "{{ vCenter.Password }}"
        copy:
            src: "{{ Target.TempFolder }}/{{ item.key }}"
            dest: "/tmp/{{ item.key }}"
            overwrite: true
      loop: "{{ Nested_Clusters | dict2items }}"
      when:
        - item.value.vSAN == true
        - item.value.DeployHosts == true
        - Target.Deployment == "vCenter"

    - name: Run Ruby script on the nested vCenter when Target Deployment is vCenter
      community.vmware.vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        validate_certs: false
        vm_id: "{{ vCenter.VMName }}"
        vm_username: "root"
        vm_password: "{{ vCenter.Password }}"
        vm_shell: /usr/bin/rvc
        vm_shell_args: '{{ vCenter.User }}:VMware1\!@{{ vCenter.FQDN | lower }} -s /tmp/{{ item.key }}'
      loop: "{{ Nested_Clusters | dict2items }}"
      when:
        - item.value.vSAN == true
        - item.value.DeployHosts == true
        - Target.Deployment == "vCenter"

    - name: Delete the Ruby script from the Ansible controller
      ansible.builtin.file: 
        path: "{{ Target.TempFolder }}/{{ item.key }}"
        state: absent
      loop: "{{ Nested_Clusters | dict2items }}"
      when: 
        - item.value.vSAN == true
        - item.value.DeployHosts == true
        - DEBUG.KeepConfigFiles == true

    - name: Modify all Cache drives in the clusters to be 'Flash' type devices
      set_drive_type:
        hostname: "{{ vCenter.FQDN | lower }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        datacenter: "{{ vCenter.DataCenter }}"
        cluster_name: "{{ item.key }}"
        drive_capacity: "{{ (Nested_ESXi.HardwareSettings[item.key].vSAN.CacheSize |int) * 1024 }}"
        set_drivetype_to_flash: true
      loop: "{{ Nested_Clusters | dict2items }}"
      when:
        - item.value.vSAN == true
        - item.value.DeployHosts == true

    - name: Modify all Capacity drives in the clusters to be 'HDD' type devices
      set_drive_type:
        hostname: "{{ vCenter.FQDN | lower }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        datacenter: "{{ vCenter.DataCenter }}"
        cluster_name: "{{ item.key }}"
        drive_capacity: "{{ (Nested_ESXi.HardwareSettings[item.key].vSAN.CapacitySize |int) * 1024 }}"
        set_drivetype_to_flash: false
      loop: "{{ Nested_Clusters | dict2items }}"
      when:
        - item.value.vSAN == true
        - item.value.DeployHosts == true

    - name: Enable vSAN
      enable_vsan:
        vcenter: "{{ vCenter.FQDN | lower }}"
        user: "{{ vCenter.User }}"
        passwd: "{{ vCenter.Password }}"
        cluster: "{{ item.key }}"
      ignore_errors: true
      loop: "{{ Nested_Clusters | dict2items }}"
      when:
        - item.value.vSAN == true
        - item.value.DeployHosts == true

    - name: Claim disks for vSAN
      claim_vsan_disks:
        vcenter: "{{ vCenter.FQDN | lower }}"
        user: "{{ vCenter.User }}"
        passwd: "{{ vCenter.Password }}"
        cluster: "{{ item.key }}"
        datastorename: "{{ item.value.vsanDatastore }}"
      ignore_errors: true
      loop: "{{ Nested_Clusters | dict2items }}"
      when:
        - item.value.vSAN == true
        - item.value.DeployHosts == true
