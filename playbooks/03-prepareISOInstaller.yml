##
##    Project: VMware NSXT SDDC Design POC Lab
##    Authors: VirtualSachIN
##    Filename: playbooks/prepareISOInstaller.yml
##
---
- hosts: localhost
  gather_facts: False
  vars_files:
    - ../answerfile.yml  
  name: prepareISOInstaller.yml
#  vars:
#    ISOMountPoint: "{{ Target.ISOMount }}/{{ Deploy.Software.ESXi.Vendor }}_{{ Deploy.Software.ESXi.Product }}_{{ Deploy.Software.ESXi.Version }}"
  tasks:
    - name: prepareISOInstaller_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ============================ Display Variables For Pod {{Pod.Name}} ===========================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                     Target.Datastore: {{ Target.Datastore }}
                                     Target.ISOFolder: {{ Target.ISOFolder }}
                                    Target.TempFolder: {{ Target.TempFolder }}

                                        ISOMountPoint: {{ ISOMountPoint }}

                         Deploy.Software.ESXi.Version: {{ Deploy.Software.ESXi.Version }}
                       Deploy.Software.ESXi.Installer: {{ Deploy.Software.ESXi.Installer }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Create temp directory
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}"
        state: directory

    - name: Mount ESXi ISO as read-only and do not automatically mount with 'mount -a'
      ansible.posix.mount:
        path:   "{{ ISOMountPoint }}"
        src:    "{{ Deploy.Software.ESXi.Directory }}/{{ Deploy.Software.ESXi.File }}"
        fstype: iso9660
        opts:   ro,noauto
        state:  mounted
      tags: esxi-install-media

    - name: Copy boot.cfg from the ESXi ISO
      ansible.builtin.copy: 
        src: "{{ ISOMountPoint }}/boot.cfg"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/"
        mode: "666"
      tags: esxi-install-media

    - name: Edit boot.cfg
      ansible.builtin.replace:
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/boot.cfg"
        regexp: 'kernelopt=.*'
        replace: 'kernelopt=ks=cdrom:/{{ Deploy.Software.ESXi.Config }}'
      tags: esxi-install-media

    - name: Create a directory for each nested ESXi host Cluster-A
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ item.value.VMName }}"
        state: directory
      loop: "{{ Nested_ESXi.HostCA | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
      tags: esxi-install-media

    - name: Create kickstart file for each nested ESXi host Cluster-A
      ansible.builtin.template: 
        src: "{{ Target.TemplateFolder }}/{{ Deploy.Software.ESXi.Template }}"
        dest: "{{ Target.TempFolder }}/{{ item.value.VMName }}/{{ Deploy.Software.ESXi.Config }}"
        mode: "666"
      loop: "{{ Nested_ESXi.HostCA | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
      tags: esxi-install-media

    - name: Create custom ESXi ISO for each nested ESXi host Cluster-A
      ansible.builtin.command: "xorrisofs -relaxed-filenames -J -R -o {{ Target.TempFolder }}/{{ item.key }} -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table {{ ISOMountPoint }}/ {{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/ {{ Target.TempFolder }}/{{ item.value.VMName }}/{{ Deploy.Software.ESXi.Config }}"
      args:
        chdir: "{{ Target.TempFolder }}/{{ item.value.VMName }}/"
      loop: "{{ Nested_ESXi.HostCA | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
      tags: esxi-install-media

    - name: Create a directory for each nested ESXi host Cluster-B
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ item.value.VMName }}"
        state: directory
      loop: "{{ Nested_ESXi.HostCB | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
      tags: esxi-install-media

    - name: Create kickstart file for each nested ESXi host Cluster-B
      ansible.builtin.template: 
        src: "{{ Target.TemplateFolder }}/{{ Deploy.Software.ESXi.Template }}"
        dest: "{{ Target.TempFolder }}/{{ item.value.VMName }}/{{ Deploy.Software.ESXi.Config }}"
        mode: "666"
      loop: "{{ Nested_ESXi.HostCB | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
      tags: esxi-install-media

    - name: Create custom ESXi ISO for each nested ESXi host Cluster-B
      ansible.builtin.command: "xorrisofs -relaxed-filenames -J -R -o {{ Target.TempFolder }}/{{ item.key }} -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table {{ ISOMountPoint }}/ {{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/ {{ Target.TempFolder }}/{{ item.value.VMName }}/{{ Deploy.Software.ESXi.Config }}"
      args:
        chdir: "{{ Target.TempFolder }}/{{ item.value.VMName }}/"
      loop: "{{ Nested_ESXi.HostCB | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
      tags: esxi-install-media

    - name: Unmount ESXi ISO
      ansible.posix.mount:
        path:  "{{ ISOMountPoint }}"
        state: absent
      when: Deploy.Software.Options.UnmountISO
      tags: esxi-install-media

    - name: Upload the ESXi ISO to the datastore if Target is Host for Cluster-A
      community.vmware.vsphere_copy: 
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        src: "{{ Target.TempFolder }}/{{ item.key }}" 
        datastore: "{{ Target.Datastore }}" 
        path: "{{ Target.ISOFolder }}/{{ item.key }}"
      loop: "{{ Nested_ESXi.HostCA | dict2items }}"
      when:
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - Target.Deployment == "Host"
      tags: esxi-install-media

    - name: Upload the ESXi ISO to the datastore if Target is vCenter for Cluster-A
      community.vmware.vsphere_copy: 
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datacenter: "{{ Target.DataCenter }}"
        src: "{{ Target.TempFolder }}/{{ item.key }}" 
        datastore: "{{ Target.Datastore }}" 
        path: "{{ Target.ISOFolder }}/{{ item.key }}"
      loop: "{{ Nested_ESXi.HostCA | dict2items }}"
      when:
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - Target.Deployment == "vCenter"
      tags: esxi-install-media

    - name: Upload the ESXi ISO to the datastore if Target is Host for Cluster-B
      community.vmware.vsphere_copy: 
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        src: "{{ Target.TempFolder }}/{{ item.key }}" 
        datastore: "{{ Target.Datastore }}" 
        path: "{{ Target.ISOFolder }}/{{ item.key }}"
      loop: "{{ Nested_ESXi.HostCB | dict2items }}"
      when:
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - Target.Deployment == "Host"
      tags: esxi-install-media

    - name: Upload the ESXi ISO to the datastore if Target is vCenter for Cluster-B
      community.vmware.vsphere_copy: 
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datacenter: "{{ Target.DataCenter }}"
        src: "{{ Target.TempFolder }}/{{ item.key }}" 
        datastore: "{{ Target.Datastore }}" 
        path: "{{ Target.ISOFolder }}/{{ item.key }}"
      loop: "{{ Nested_ESXi.HostCB | dict2items }}"
      when:
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - Target.Deployment == "vCenter"
      tags: esxi-install-media

    - name: Delete local ISO content directory 
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}"
        state: absent
      when: DEBUG.KeepInstallerFiles != true
      tags: esxi-install-media

    - name: Delete nested ESXi host directories Cluster-A
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ item.value.VMName }}"
        state: absent
      loop: "{{ Nested_ESXi.HostCA | dict2items }}"
      when: 
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - DEBUG.KeepInstallerFiles != true
      tags: esxi-install-media

    - name: Delete the ESXi ISO files for Cluster-A
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ item.key }}" 
        state: absent
      loop: "{{ Nested_ESXi.HostCA | dict2items }}"
      when: 
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - DEBUG.KeepInstallerFiles != true
      tags: esxi-install-media

    - name: Delete nested ESXi host directories Cluster-B
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ item.value.VMName }}"
        state: absent
      loop: "{{ Nested_ESXi.HostCB | dict2items }}"
      when: 
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - DEBUG.KeepInstallerFiles != true
      tags: esxi-install-media

    - name: Delete the ESXi ISO files for Cluster-B
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ item.key }}" 
        state: absent
      loop: "{{ Nested_ESXi.HostCB | dict2items }}"
      when: 
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - DEBUG.KeepInstallerFiles != true
      tags: esxi-install-media
